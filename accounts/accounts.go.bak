package accounts

/*
将一个公钥转换成一个 Base58 地址：
    使用 RIPEMD160(SHA256(PubKey)) 哈希算法，取公钥并对其哈希两次
    给哈希加上地址生成算法版本的前缀
    对于第二步生成的结果，使用 SHA256(SHA256(payload)) 再哈希，计算校验和。校验和是结果哈希的前四个字节。
    将校验和附加到 version+PubKeyHash 的组合中。
    使用 Base58 对 version+PubKeyHash+checksum 组合进行编码。
*/

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/sha256"
	"encoding/gob"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/guoxingx/gxchain/common"
	"golang.org/x/crypto/ripemd160"
)

const addressChecksumLen = 4
const version = byte(0x00)

type Account struct {
	PrivateKey ecdsa.PrivateKey
	PublicKey  []byte
}

// NewAccount creates an account.
func NewAccount() *Account {
	private, public := newKeyPair()
	account := Account{private, public}

	return &account
}

// 生成新的公私钥
func newKeyPair() (ecdsa.PrivateKey, []byte) {
	curve := elliptic.P256()
	private, err := ecdsa.GenerateKey(curve, rand.Reader)
	if err != nil {
		log.Panic(err)
	}

	// ... 在这里类似于python的 *list
	// 将Y.Bytes() 逐个append到 X.Bytes()
	pubKey := append(private.PublicKey.X.Bytes(), private.PublicKey.Y.Bytes()...)

	return *private, pubKey
}

/*
地址由三个部分组成
    1. Version
    2. Public key hash
    3. Checksum 来自sha256(sha256(PublicKeyHash))
*/
func (w Account) GetAddress() []byte {
	pubKeyHash := HashPubKey(w.PublicKey)

	versionedPayload := append([]byte{version}, pubKeyHash...)
	checksum := checksum(versionedPayload)

	fullPayload := append(versionedPayload, checksum...)
	address := common.Base58Encode(fullPayload)

	return address
}

// GetHashPubKey returns hashed publick key of account.
func (w *Account) GetHashPubKey() []byte {
	publicSHA256 := sha256.Sum256(w.PublicKey)

	RIPEMD160Hasher := ripemd160.New()
	_, err := RIPEMD160Hasher.Write(publicSHA256[:])
	if err != nil {
		log.Panic(err)
	}

	publicRIPEMD160 := RIPEMD160Hasher.Sum(nil)

	return publicRIPEMD160
}

// 将address string 转换成pubKeyHash []byte
func AddressToPubKeyHash(address string) (pubKeyHash []byte) {
	pubKeyHash = common.Base58Decode([]byte(address))
	pubKeyHash = pubKeyHash[1 : len(pubKeyHash)-addressChecksumLen]
	return
}

// ValidateAddress checks if an address is valid.
func ValidateAddress(address string) bool {
	pubKeyHash := common.Base58Decode([]byte(address))
	actualChecksum := pubKeyHash[len(pubKeyHash)-addressChecksumLen:]
	version := pubKeyHash[0]
	pubKeyHash = pubKeyHash[1 : len(pubKeyHash)-addressChecksumLen]

	targetChecksum := checksum(append([]byte{version}, pubKeyHash...))

	return bytes.Compare(actualChecksum, targetChecksum) == 0
}

// just sha256.Sum256 twice
func checksum(payload []byte) []byte {
	firstSHA := sha256.Sum256(payload)
	secondSHA := sha256.Sum256(firstSHA[:])

	return secondSHA[:addressChecksumLen]
}

const accountFile = "data/account.dat"

type Accounts struct {
	Accounts map[string]*Account
}

//
func NewAccounts() (*Accounts, error) {
	accounts := Accounts{}
	accounts.Accounts = make(map[string]*Account)

	err := accounts.LoadFromFile()

	return &accounts, err
}

//
func (accounts *Accounts) CreateAccount() string {
	account := NewAccount()

	// account.GetAddress return []byte
	address := fmt.Sprintf("%s", account.GetAddress())
	accounts.Accounts[address] = account

	return address
}

//
func (accounts *Accounts) GetAddresses() []string {
	var addresses []string

	for address := range accounts.Accounts {
		addresses = append(addresses, address)
	}

	return addresses
}

//
func (accounts *Accounts) GetAccount(address string) Account {
	return *accounts.Accounts[address]
}

// 从文件中加载account
func (accounts *Accounts) LoadFromFile() error {
	if _, err := os.Stat(accountFile); os.IsNotExist(err) {
		return err
	}

	fileContent, err := ioutil.ReadFile(accountFile)
	if err != nil {
		log.Panic(err)
	}

	var accounts_loaded Accounts

	// gob.Register         f func(value interface{})
	// elliptic.P256        f func() elliptic.Curve
	// elliptic.Curve       t interface
	gob.Register(elliptic.P256())

	// gob.NewDecoder f func(r io.Reader) *gob.NewDecoder
	decoder := gob.NewDecoder(bytes.NewReader(fileContent))

	// decoder.Decode      f func(e interface{}) error
	err = decoder.Decode(&accounts_loaded)
	if err != nil {
		log.Panic(err)
	}

	accounts.Accounts = accounts_loaded.Accounts

	return nil
}

func (accounts Accounts) SaveToFile() {
	var content bytes.Buffer

	gob.Register(elliptic.P256())

	// gob.NewEncoder  f func(w io.Writer) *gob.Encoder
	encoder := gob.NewEncoder(&content)

	// encoder.Encode  f func(e interface{}) error
	err := encoder.Encode(accounts)
	if err != nil {
		log.Panic(err)
	}

	// ioutil.WriteFile  f func(filename string, data []byte, perm os.FileMode) error
	err = ioutil.WriteFile(accountFile, content.Bytes(), 0644)
	if err != nil {
		log.Panic(err)
	}
}
